/*
  Auto-generated by Spline
*/
import React, { useState, useRef } from "react";
import useSpline from "@splinetool/r3f-spline";
import { OrthographicCamera, OrbitControls } from "@react-three/drei";
import { Canvas } from "@react-three/fiber";
import { motion } from "framer-motion-3d";
import useSound from "use-sound";
import drawSfx from "../../sounds/drawer.wav";

export default function Drawer() {
  return (
    <div style={{ height: "100%", width: "100%" }}>
      <Scene />
    </div>
  );
}

const Scene = ({ ...props }) => {
  const [openIndex, setOpenIndex] = useState(null);
  const [isRotated, setIsRotated] = useState(false);
  const [hoverIndex, setHoverIndex] = useState(null);
  const [playbackRate, setPlaybackRate] = React.useState(1);

  const [play] = useSound(drawSfx, {
    playbackRate,
    // `interrupt` ensures that if the sound starts again before it's
    // ended, it will truncate it. Otherwise, the sound can overlap.
    interrupt: true,
  });

  const drawerTransition = {
    type: "spring",
    bounce: "0.25",
  };

  const mesh = useRef();

  const zOpen = -200;
  const openDrawer = (i) => {
    setPlaybackRate(1);
    
    //close drawer
    if (i === openIndex) {
      setPlaybackRate(0.75);
      play();
      setOpenIndex(null);
      setIsRotated(false);
      return;
    }
    setOpenIndex(i);
    setIsRotated(true);
    play();
  };

  const isOpen = (i) => {
    if (i == openIndex) return true;
    else return false;
  };

  const { nodes, materials } = useSpline(
    "https://prod.spline.design/Ixlk9z4kVhTP8VIa/scene.splinecode"
  );
  return (
    <Canvas>
      <group {...props} dispose={null}>
        <OrthographicCamera
          name="Camera"
          makeDefault={true}
          zoom={1.35}
          far={100000}
          near={-100000}
          position={[0, 0, -1002.44]}
          rotation={[-3.14, 0, 3.14]}
          scale={1}
        />
        <motion.group
          name="Drawers"
          animate={{
            rotateX: isRotated ? -Math.PI / 2 : 0,
            y: isRotated ? 200 : 0,
          }}
          transition={{ type: "spring", bounce: 0.15 }}
        >
          <mesh
            ref={mesh}
            name="Boolean"
            geometry={nodes.Boolean.geometry}
            material={nodes.Boolean.material}
            castShadow
            receiveShadow
            position={[0, 0, 0]}
            scale={[1, 0.85, 1]}
          />
          <group name="Group Clones" position={[0, 83, -12.52]}>
            <motion.group
              name="Clone 0"
              onClick={() => openDrawer(0)}
              animate={{ z: isOpen(0) ? zOpen : 0 }}
              transition={drawerTransition}
              whileHover={{ scale: 1.01 }}
            >
              <group name="Heart" position={[0, -1.59, -102.06]} scale={0.15}>
                <mesh
                  name="Cylinder"
                  geometry={nodes.Cylinder.geometry}
                  material={materials.red}
                  castShadow
                  receiveShadow
                  position={[3.5, 11.2, 60.05]}
                  rotation={[1.55, 0, 0]}
                />
                <motion.mesh
                  name="heart_lowpoly 3"
                  geometry={nodes["heart_lowpoly 3"].geometry}
                  material={materials.red}
                  castShadow
                  receiveShadow
                  position={[-0.03, 0.02, 4.42]}
                  rotation={[-0.02, -0.01, 0.01]}
                  scale={0.55}
                />
              </group>
              <mesh
                name="Boolean1"
                geometry={nodes.Boolean1.geometry}
                material={nodes.Boolean1.material}
                castShadow
                receiveShadow
                position={[0, 0, 8.78]}
                scale={[1, 0.75, 1]}
              />
            </motion.group>
            <motion.group
              name="Clone 1"
              position={[0, -85, 0]}
              onClick={() => openDrawer(1)}
              animate={{ z: isOpen(1) ? zOpen : 0 }}
              transition={drawerTransition}
              whileHover={{ scale: 1.01 }}
            >
              <group name="Heart1" position={[0, -1.59, -102.06]} scale={0.15}>
                <mesh
                  name="Cylinder1"
                  geometry={nodes.Cylinder1.geometry}
                  material={materials.red}
                  castShadow
                  receiveShadow
                  position={[3.5, 11.2, 60.05]}
                  rotation={[1.55, 0, 0]}
                />
                <mesh
                  name="heart_lowpoly 31"
                  geometry={nodes["heart_lowpoly 31"].geometry}
                  material={materials.red}
                  castShadow
                  receiveShadow
                  position={[-0.03, 0.02, 4.42]}
                  rotation={[-0.02, -0.01, 0.01]}
                  scale={0.55}
                />
              </group>
              <mesh
                name="Boolean2"
                geometry={nodes.Boolean2.geometry}
                material={nodes.Boolean2.material}
                castShadow
                receiveShadow
                position={[0, 0, 8.78]}
                scale={[1, 0.75, 1]}
              />
            </motion.group>
            <motion.group
              name="Clone 2"
              position={[0, -170, 0]}
              onClick={() => openDrawer(2)}
              animate={{ z: isOpen(2) ? zOpen : 0 }}
              transition={drawerTransition}
              whileHover={{ scale: 1.01 }}
            >
              <group name="Heart2" position={[0, -1.59, -102.06]} scale={0.15}>
                <mesh
                  name="Cylinder2"
                  geometry={nodes.Cylinder2.geometry}
                  material={materials.red}
                  castShadow
                  receiveShadow
                  position={[3.5, 11.2, 60.05]}
                  rotation={[1.55, 0, 0]}
                />
                <mesh
                  name="heart_lowpoly 32"
                  geometry={nodes["heart_lowpoly 32"].geometry}
                  material={materials.red}
                  castShadow
                  receiveShadow
                  position={[-0.03, 0.02, 4.42]}
                  rotation={[-0.02, -0.01, 0.01]}
                  scale={0.55}
                />
              </group>
              <mesh
                name="Boolean3"
                geometry={nodes.Boolean3.geometry}
                material={nodes.Boolean3.material}
                castShadow
                receiveShadow
                position={[0, 0, 8.78]}
                scale={[1, 0.75, 1]}
              />
            </motion.group>
          </group>
        </motion.group>

        <hemisphereLight
          name="Default Ambient Light"
          intensity={0.3}
          color="#9c2e0c"
        />
      </group>
    </Canvas>
  );
};
